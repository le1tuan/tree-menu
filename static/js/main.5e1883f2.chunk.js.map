{"version":3,"sources":["containers/MenuItem/index.js","containers/Menu/index.js","containers/Article/index.js","App.js","serviceWorker.js","index.js"],"names":["MenuItem","_this$props","this","props","label","subMenu","react_default","a","createElement","className","React","Component","menuTree","nodes","i","length","_loop","j","node","items","found","find","n","name","Object","assign","removed","reduce","arr","item","push","parseJsonTree","Menu","recursiveRender","tree","map","t","src_containers_MenuItem","Article","style","position","zIndex","boxShadow","width","overflow","padding","textAlign","lineHeight","src","alt","App","src_containers_Menu","containers_Article","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mqBAyBeA,0LArBJ,IAAAC,EACoBC,KAAKC,MAAxBC,EADDH,EACCG,MAAOC,EADRJ,EACQI,QACf,OACEC,EAAAC,EAAAC,cAAA,UAEIJ,GACAE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,SAAIJ,GAEFC,GAAWC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAGxBJ,GAAWC,EAAAC,EAAAC,cAAA,MAAIC,UAAS,iDAAoDJ,YAbnEK,IAAMC,YC0BvBC,SAxBgB,SAACC,GACrB,IAAK,IAAIC,EAAI,EAAGA,EAAGD,EAAME,OAAQD,IAC/B,IADoC,IAAAE,EAAA,SAC3BC,GACP,IAAIC,EAAOL,EAAMC,GAAGK,MAAMF,GACtBG,EAAQP,EAAMQ,KAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAQL,IAClCE,GACFP,EAAMC,GAAGK,MAAMF,GAAKO,OAAOC,OAAO,GAAIL,GACtCA,EAAMM,SAAU,GAEhBb,EAAMC,GAAGK,MAAMF,GAAK,CAClBM,KAAML,EACNC,MAAO,KATJF,EAAI,EAAGA,EAAIJ,EAAMC,GAAGK,MAAMJ,OAAQE,IAAKD,EAAvCC,GAcX,OAAOJ,EAAMc,OAAO,SAACC,EAAKC,GAIxB,OAHKA,EAAKH,SACRE,EAAIE,KAAKD,GAEJD,GACN,IAGYG,YA+BFC,mLARX,OACE1B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aArBpB,SAASwB,EAAgBC,GAEvB,OAAY,IADAA,EAAKnB,OAERT,EAAAC,EAAAC,cAAA,YAEF0B,EAAKC,IAAI,SAACC,GACf,OAAuB,IAAnBA,EAAEjB,MAAMJ,OACHT,EAAAC,EAAAC,cAAC6B,EAAD,CACLjC,MAAOgC,EAAEb,OAGNjB,EAAAC,EAAAC,cAAC6B,EAAD,CACLjC,MAAOgC,EAAEb,KACTlB,QAAS4B,EAAgBG,EAAEjB,WASxBc,CAAgBrB,WAJNF,IAAMC,WCnBV2B,mLA3BX,OACEhC,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CACVC,SAAU,WACVC,OAAQ,IACRC,UAAW,4BACXC,MAAO,IACPC,SAAU,OACVC,QAAS,GACTC,UAAW,OACXC,WAAY,WAEZzC,EAAAC,EAAAC,cAAA,+EACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,gTACAF,EAAAC,EAAAC,cAAA,OAAM+B,MAAO,CACXI,MAAO,QACNK,IAAI,wEAAwEC,IAAI,SACnF3C,EAAAC,EAAAC,cAAA,k1BAnBcE,IAAMC,WCcbuC,MAXf,WACE,OACE5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAC2C,EAAD,MACA7C,EAAAC,EAAAC,cAAC4C,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5e1883f2.chunk.js","sourcesContent":["import React from 'react'\nimport \"./index.css\"\n\nclass MenuItem extends React.Component {\n  render() {\n    const { label, subMenu } = this.props;\n    return (\n      <li>\n        { \n          label && \n          <div className=\"tree-menu__title\">\n            <p>{label}</p>\n            {\n              subMenu && <i className=\"fas fa-angle-right\"></i>\n            }\n            {\n              subMenu && <ul className={`tree-menu__submenu tree-menu__submenu--hidden`}>{subMenu}</ul>\n            }\n          </div>\n        }\n      </li>\n    )\n  }\n}\n\nexport default MenuItem","import React from 'react'\nimport MenuItem from '../MenuItem'\nimport './index.css'\nimport menu from '../../data/menu.json'\n\nconst parseJsonTree = (nodes) => {\n  for (let i = 0; i< nodes.length; i++) {\n    for (let j = 0; j < nodes[i].items.length; j++) {\n      let node = nodes[i].items[j]\n      let found = nodes.find(n => n.name == node);\n      if (found) {\n        nodes[i].items[j] = Object.assign({}, found);\n        found.removed = true;\n      } else {\n        nodes[i].items[j] = {\n          name: node,\n          items: []\n        }\n      }\n    }\n  }\n  return nodes.reduce((arr, item) => {\n    if (!item.removed) {\n      arr.push(item);\n    }\n    return arr\n  }, [])\n}\n\nconst menuTree = parseJsonTree(menu)\n\n\nfunction recursiveRender(tree) {\n  const len = tree.length\n  if (len === 0) {\n    return <div />\n  }\n  return tree.map((t) => {\n    if (t.items.length === 0) {\n      return <MenuItem\n        label={t.name}\n      />\n    }\n    return <MenuItem \n      label={t.name}\n      subMenu={recursiveRender(t.items)}\n    />\n  })\n}\n\nclass Menu extends React.Component {\n  render() {\n    return (\n      <ul className=\"tree-menu\"> \n        {recursiveRender(menuTree)}\n      </ul>\n    )\n  }\n}\n\nexport default Menu;","import React from 'react'\n\nclass Article extends React.Component {\n  render() {\n    return (\n      <div style={{\n        position: 'relative',\n        zIndex: '1',\n        boxShadow: '0 0 2px 0 rgba(0,0,0,.25)',\n        width: 700,\n        overflow: 'auto',\n        padding: 20,\n        textAlign: 'left',\n        lineHeight: '1.5rem'\n      }}>\n        <h2>TomoChain — Axie Infinity Partnership Announcement</h2>\n        <br/>\n        <p>TomoChain is proud to announce our strategic partnership with Axie Infinity, a digital pet community, founded upon the vision of delivering true gameplay and utility to the decentralized gaming space. Axies are digital pets that you can collect, raise, and pit against other Axies in battle.</p>\n        <img  style={{\n          width: '100%'\n        }} src=\"https://cdn-images-1.medium.com/max/800/1*-sgkMjCBa2WN3vH2guscFA.jpeg\" alt=\"tomo\" />\n        <p>The Axie team was impressed by TomoChain’s scalability solution demonstrated via PoSV consensus with 150 masternodes. Achieving 2 second block times and over 2000 TPS has proven that the TomoChain platform can ensure stability and security for Axie Infinity’s operation.\n\nTomoChain users now can use native TOMO tokens to play around with Aixe Infinity as an accepted payment for items sold. According to Gameunculus’s pick this December, Axie Infinity was one of the top gaming Dapps that has gained the 3rd biggest sales total so far, behind Decentraland and CryptoKitties.\n\nWe will collaborate in cross-chain integration as well as business development and community engagement to connect both communities with each other; as well as continue to raise awareness of blockchain use cases wherever we are presenting.</p>\n      </div>\n    )\n  }\n}\n\nexport default Article;","import React from 'react';\nimport './App.css';\nimport Menu from './containers/Menu';\nimport Article from './containers/Article'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App__container\">\n        <Menu />\n        <Article />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}